---
lightbox: auto
title: "An overview of Quantum Error Mitigation"
subtitle: from theory to practice
date: 6 Aug 2025
date-modified: last-modified
bibliography: references.bib
appendix-cite-as: display
include-in-header:
  - text: |
      <link rel="shortcut icon" href="assets/mitiq.ico" />
# footer: "{{< fa brands github >}} [natestemen.github.io/qem-qusoft](https://natestemen.github.io/qem-qusoft/)"
open-graph:
  title: "An overview of Quantum Error Mitigation: from theory to practice"
  description: "Presentation on Quantum Error Mitigation given at BMW seminar."
  type: "website"
author:
  name: nate stemen
  url: https://nates.place
  email: nate@stemen.email
  affiliation: Unitary Foundation
  affiliation-url: https://unitary.foundation
citation:
  author: nate stemen
  title: "An overview of Quantum Error Mitigation: from theory to practice"
  type: speech
  abstract: |
    Quantum error mitigation (QEM) provides a set of techniques to reduce the impact of noise in near-term quantum computers without the large qubit overhead of quantum error correction. In this talk, I will introduce the core ideas behind QEM and detail the differences from error correction. I will discuss theoretical results that constrain the effective use of QEM techniques in theory, and showcase how these techniques have been used in practice. From there, we will explore the future of QEM as hardware improves and error-corrected devices come online.
callout-style: simple
format:
  revealjs:
    output-file: "slides.html"
    slide-number: c
    auto-animate: true
    touch: true
    pause: false
    logo: https://raw.githubusercontent.com/unitaryfund/unitary.foundation/refs/heads/main/src/assets/svg/logo.svg
    history: false
    theme: [css/dark.scss]
    css: [css/default.css, css/callouts.css]
    self-contained: false
    embed-resources: false
    self-contained-math: false
    highlight-style: "atom-one"
    html-math-method: katex
---

# {.title-slide .centeredslide}

::: {style="background-color: rgba(22,22,22,0.75); border-radius: 10px; text-align:center; padding: 0px; padding-left: 1.5em; padding-right: 1.5em; max-width: min-content; min-width: max-content; margin-left: auto; margin-right: auto; padding-top: 0.2em; padding-bottom: 0.2em; line-height: 1.5em!important;"}
<span style="color:#939393; font-size:1.5em; font-weight: bold;">{{< meta title >}}</span>  
<span style="color:#777777; font-size:1.2em; font-weight: bold;">{{< meta subtitle >}}</span>  
[<br>&nbsp;]{style="padding-bottom: 0.5rem;"}  
[{{< fa solid home >}} nate stemen](https://nates.place)

[{{< fa brands github >}} `unitaryfoundation/mitiq`](https://github.com/unitaryfoundation/mitiq)

[{{< meta date >}} @ BMW Seminar]{.dim-text style="text-align:left;'}
:::

# Overview

1. [`$ whoami`](#whoami-nate-stemen)
1. [Quantum Error Mitigation](#quantum-error-mitigation-qem)
    - [Comparison to Error Correction](#what-about-error-correction)
2. QEM Techniques
    - [Zero-Noise Extrapolation (ZNE)](#zero-noise-extrapolation)
    - [Probabilistic Error Cancellation (PEC)](#probabilistic-error-cancellation)
3. [QEM Feasibility](#qem-feasibility)
4. [`import mitiq`](#import-mitiq)
5. [Unitary Foundation](#unitary-foundation)

# `$ whoami`: nate stemen {.centeredslide}

::: {.fragment}

**What I Do:**

:::

::: {.incremental}

- Member of Technical Staff @ [Unitary Foundation]{.yellow-text}
- Researcher & engineer in **error mitigation (QEM)**  
- Maintainer of `mitiq`, an open-source QEM package  
- Interested in quantum software, and near-term use of QCs

:::


::: {.fragment}
**Why This Talk?**  

- QEM is an attempt to bring quantum utility sooner

:::

# Quantum Error Mitigation (QEM) {.centeredslide}

:::: {.columns}

::: {.column width="40%"}

::: {.callout-note title="Goal" style="text-align:left;!important" .fragment fragment-index=1}
Estimate $\langle O \rangle = \mathrm{tr}(O \rho)$ given

1. a quantum circuit $C$ preparing $\rho$
2. a _noisy_ quantum device
:::

::: {.callout-tip title="Idea" .fragment fragment-index=3}
Algorithm is allowed to modify input circuit $C$ and apply any postprocessing.
:::

:::

::: {.column width="59%" .fragment fragment-index=2}
<img src="assets/qem.png" width="600" />
:::

::::


# What about Error Correction? {.centeredslide}

::: {.columns}
::: {.column width="40%"}
**Quantum Error Mitigation**

::: {.incremental .fade-in-then-semi-out}
- Perform multiple different noisy computations
- Collect results
- Infer ideal expectation values
:::

::: {.fragment}
**Quantum Error Correction**
:::

::: {.incremental .fade-in-then-semi-out}
- Encode logical qubits into many physical qubits
- Mid-circuit measurements extract syndromes
- Use syndromes to correct errors
:::

:::
::: {.column width="60%"}

::: {.r-stack}
![](assets/runtime_vs_complexity.svg){.fragment}

![](assets/runtime_vs_complexity_highlight.svg){.fragment}
:::
:::
:::

# Zero-Noise Extrapolation {.centeredslide}

::: {.columns}
::: {.column}
[$$\partial_t \rho = -i [H, \rho] + \textcolor{#F06292}{\lambda} \mathcal{L}(\rho)$$]{.fragment}

::: {.incremental}
1. Run circuit of interest at higher noise levels $C_{\textcolor{#F06292}{\lambda}}$
2. Measure $\langle O \rangle_{\textcolor{#F06292}{\lambda}} = \mathrm{tr}(C_{\textcolor{#F06292}{\lambda}}|0\rangle\langle 0| O)$
3. Extrapolate and return $\langle O\rangle_{\textcolor{#F06292}{0}}$.
:::

::: {.fragment}
<img src="assets/extrapolation.png" width="350" />
:::
:::
::: {.column}

::: {.callout-tip title="Key Idea" .fragment fragment-index=1}
Scale noise [up]{.green-text}, extrapolate back to zero-noise value.
:::

::: {.fragment}
<img src="assets/scaling.png" width="500"/>
:::
:::
:::

# Probabilistic Error Cancellation {.centeredslide}

::: {.columns}
::: {.column}

[$$\mathcal{U}_\text{ideal} = \sum_{i=1}^n a_i \mathcal{O}_i$$]{.fragment}

::: {.incremental}
1. Characterize implementable operations (basis gates)
2. Construct representations of wanted gates
3. Create circuits by sampling gates according to $|a_i|$
4. Execute circuits
5. Return
  $$\langle O\rangle_\text{PEC} = \frac{\gamma}{M}\sum_{i=1}^M \sigma_i \langle O \rangle_i$$
:::

:::
::: {.column}

::: {.callout-tip title="Key Idea" .fragment fragment-index=1}
Use noisy operations to build ideal ones by selective cancellation and sampling.
:::

::: {.fragment fragment-index=2}
![](assets/pec.png)
:::

:::
:::

# QEM Feasibility {.centeredslide}

<img src="assets/runtime_vs_complexity_highlight.svg" width="1000">


# Feasibility Studies {.centeredslide}

::::: {.columns}

::: {.column width="50%" .fragment}
**[Classical]{.pink-text} Noisy Simulation Algorithms**

::: {.fragment}
<img src="assets/papers/noisy-rcs.png" style="border-radius: 8px;" />
<img src="assets/papers/classical-qcs.png" style="border-radius: 8px;" />
<img src="assets/papers/pauli-prop.png" style="border-radius: 8px;" />
:::

:::
::: {.column width="50%" .fragment}
**QEM Sample Complexity**

::: {.fragment}
<img src="assets/papers/qem-sampling.png" style="border-radius: 8px;" />
<img src="assets/papers/qem-sampling-low-bounds.png" style="border-radius: 8px;" />
:::
:::
:::::

::: {.callout-caution title="Not Covered" .fragment}
Reducing the cost of QEC
:::

# Sampling Overhead {.centeredslide}

::: {.incremental}
- Suppose circuit contains $G$ gates with error rate $\varepsilon$
- $\mathrm{Pr}[\text{no errors}] = (1 - \varepsilon)^G \approx \mathrm{e}^{-\varepsilon G}$
- Worst case lower bounded by $\sim \mathrm{e}^{\varepsilon N L}$ [@takagi23]
:::

::: {.fragment}
> Error mitigation is hopeless on circuits that scramble information rapidly. [@quek24]
:::

::: {.fragment}
- When $\varepsilon NL = O(1)$, i.e. circuit size $O(\varepsilon^{-1})$ QEM is not prohibitive
:::

::: {.columns}
::: {.column .fragment}
| Average 2Q Error $\varepsilon$ | Feasible circuit size                         |
| ------------------------------ |:---------------------------------------------:|
| $10^{-3}$                      | $100 \times 100$                              |
| $10^{-4}$                      | $300 \times 300$<br>$100 \times 1000$         |
| $10^{-5}$                      | $1000 \times 1000$<br>$100 \times 10,000$     |
[@zimboras25]
:::
::: {.column}
::: {.callout-tip .fragment title="QEM $\bigcap$ QEC?"}
[$\varepsilon^{-1} = NL$ can be achieved in _by_ QEC]{.fragment}
:::
:::
:::


# QEM Feasibility {.centeredslide}

<img src="assets/runtime_vs_complexity_highlight.svg" width="1000">

# `import mitiq` {.centeredslide}

::: {.columns}
::: {.column}
::: {.callout-note title="Goal" .fragment}
Create a tool that anyone programming quantum computers can _easily_ use.
:::

::: {.callout-caution title="requirements.txt" .fragment}
::: {.incremental}
- Easy to use
- Minimal QEM knowledge
- Works with QC access people already have
- Works across SDKs
:::
:::
:::
::: {.column}
![](assets/workflow.png){.fragment}

![](assets/code.png){.fragment}
:::
:::

::: {.callout-important title="Docs!" .fragment}
[`mitiq.readthedocs.io`](https://mitiq.readthedocs.io/)
:::

# Recap {.centeredslide}

::: {.columns}
::: {.column width="33%" .fragment .fade-in-then-semi-out}
**Feasibility**

- No circuits proven to be feasible
- Utility/advantage papers
- [Restrictions]{.orange-text} on QEM-feasible zone

<img src="assets/runtime_vs_complexity_highlight.svg" width="300">
:::

::: {.column width="33%" .fragment .fade-in-then-semi-out}

**Open Questions**

- Benchmarking QEM techniques
- Average-case analysis for QEM sampling cost

:::

::: {.column width="33%" .fragment .fade-in-then-semi-out}
**In practice**

- Using error mitigation in practice is possible with `mitiq`
- Tuning technique-parameters are often a [challenge]{.red-text}

<img src="assets/mitiq-examples.png" width="300">
:::
:::


# [Unitary Foundation]{.yellow-text} {.centeredslide}

:::: {.columns .fragment}
::: {.column width="33%"}
**Software**

- `mitiq`
- [metriq.info](https://metriq.info)
- `ucc`

:::
::: {.column width="33%"}
**Research**

- QEM
- Benchmarking
- Compilation

:::
::::

[**Ecosystem**]{.fragment}

::::: {.columns}
:::: {.column}
::: {.incremental}
- Microgrant program
  - [$4k]{.green-text}; no strings attached
  - aimed at explorers in quantum
  - open-source, but also community projects
  - 3-6 month duration
:::

::: {.callout-tip .fragment}
Apply @ [`unitary.foundation/grants`](https://unitary.foundation/grants)
:::

::::

:::: {.column}
::: {.incremental}
- Discord : [`discord.unitary.foundation`](http://discord.unitary.foundation)
- unitaryHACK : [`unitaryhack.dev`](https://unitaryhack.dev)
- Quantum Open-Source Software Survey : [`unitaryfoundation.github.io/survey-2024`](https://unitaryfoundation.github.io/survey-2024/)
- unitaryCON @ IEEE QCE 2025
:::
::::

:::::


# Thank you!

::: {.callout-tip title="Contact"}
📧 [`nate@stemen.email`](mailto:nate@stemen.email)
:::

# References
